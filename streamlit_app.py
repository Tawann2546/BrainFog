import streamlit as st
st.set_page_config(page_title='BrainFog', layout='wide')
st.markdown("""
<h1 style='text-align: left; font-size: 60px;'>üß† BrainFog</h1>
""", unsafe_allow_html=True)


import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder 

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
@st.cache_data
def load_data():
    df = pd.read_csv("Video_Games_Sales_as_at_22_Dec_2016.csv")
    df = df.dropna(subset=['Year_of_Release', 'Genre', 'Global_Sales'])
    df['Year_of_Release'] = df['Year_of_Release'].astype(int)
    return df

df = load_data()

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ô‡∏ß‡πÄ‡∏Å‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏µ
genre_year = df.groupby(['Year_of_Release', 'Genre'])['Global_Sales'].sum().reset_index()

# UI ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏µ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
st.title("üìà ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ô‡∏ß‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï")
years_forward = st.slider("üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏µ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢", 1, 5, 5)

# ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
future_years = pd.DataFrame([(year, genre) for year in range(2025, 2025 + years_forward) for genre in genre_year['Genre'].unique()],
                            columns=['Year_of_Release', 'Genre'])
future_years['Predicted_Sales'] = 0  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 0 ‡∏ó‡∏∏‡∏Å‡∏õ‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ slope ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢

# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
genre_all_years = pd.concat([
    genre_year[['Year_of_Release', 'Genre', 'Global_Sales']],
    future_years.rename(columns={'Predicted_Sales': 'Global_Sales'})[['Year_of_Release', 'Genre', 'Global_Sales']]
])

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì slope ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÄ‡∏Å‡∏°
growth_results = []
for genre in genre_all_years['Genre'].unique():
    subset = genre_all_years[genre_all_years['Genre'] == genre]
    X = subset[['Year_of_Release']]
    y = subset['Global_Sales']
    
    model = LinearRegression()
    model.fit(X, y)
    slope = model.coef_[0]
    growth_results.append((genre, slope))

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
trend_df = pd.DataFrame(growth_results, columns=['Genre', 'Growth_Trend'])
trend_df = trend_df.sort_values(by='Growth_Trend', ascending=False)

st.subheader("üìä ‡πÅ‡∏ô‡∏ß‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï")
st.dataframe(trend_df.set_index('Genre').style.format("{:.3f}"))

# ----------------------------
# üî¢ ‡∏Ç‡πâ‡∏≠ 2: ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ô‡∏ß‡πÄ‡∏Å‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
# ----------------------------

# ‚úÖ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
region_cols = ['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']

with st.container():
    st.markdown("## üß© ‡∏Ç‡πâ‡∏≠ 2: ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ô‡∏ß‡πÄ‡∏Å‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ (‡∏•‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢)")

    # ‚úÖ UI ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    st.markdown("### üóìÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏µ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
    predict_years = st.slider(" ", 1, 5, 3, key="region_years")
    future_years = list(range(2017, 2017 + predict_years))

    # ‚úÖ ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ô‡∏ß‡πÄ‡∏Å‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏µ
    genre_region_year = df.groupby(['Year_of_Release', 'Genre'])[region_cols].sum().reset_index()
    last_year = genre_region_year['Year_of_Release'].max()
    latest_sales = genre_region_year[genre_region_year['Year_of_Release'] == last_year].copy()

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    future_data = []
    for year in future_years:
        temp = latest_sales.copy()
        temp['Year_of_Release'] = year
        future_data.append(temp)
    future_df = pd.concat(future_data, ignore_index=True)

    # ‚úÖ ‡∏£‡∏ß‡∏°‡∏≠‡∏î‡∏µ‡∏ï‡πÅ‡∏•‡∏∞‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    all_region_data = pd.concat([genre_region_year, future_df], ignore_index=True)
    all_region_sales = all_region_data.groupby('Genre')[region_cols].sum().reset_index()

    # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á Genre ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    le = LabelEncoder()
    all_region_sales['Genre_encoded'] = le.fit_transform(all_region_sales['Genre'])

    # ‚úÖ ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà
    X = all_region_sales[['Genre_encoded']]
    y = all_region_sales[region_cols]
    model2 = LinearRegression()
    model2.fit(X, y)

    # ‚úÖ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    preds = model2.predict(X)
    pred_df = pd.DataFrame(preds, columns=region_cols)
    pred_df['Genre'] = all_region_sales['Genre']

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    st.dataframe(pred_df.set_index('Genre').round(2))

    # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á stacked
    st.markdown("### üìä ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÄ‡∏Å‡∏°‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ")
    st.bar_chart(pred_df.set_index('Genre')[region_cols].round(2))
